"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1510],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>g});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=o.createContext({}),d=function(e){var n=o.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=d(e.components);return o.createElement(i.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},c=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=d(t),c=r,g=u["".concat(i,".").concat(c)]||u[c]||m[c]||l;return t?o.createElement(g,a(a({ref:n},s),{},{components:t})):o.createElement(g,a({ref:n},s))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,a=new Array(l);a[0]=c;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p[u]="string"==typeof e?e:r,a[1]=p;for(var d=2;d<l;d++)a[d]=t[d];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}c.displayName="MDXCreateElement"},99842:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>p,metadata:()=>d,toc:()=>u});var o=t(87462),r=t(63366),l=(t(67294),t(3905)),a=["components"],p={},i="springfox \u6e90\u7801\u5206\u6790(\u5341) \u904d\u5386\u63a5\u53e3\u83b7\u53d6Model\u5bf9\u8c61",d={unversionedId:"action/springfox/springfox10",id:"action/springfox/springfox10",title:"springfox \u6e90\u7801\u5206\u6790(\u5341) \u904d\u5386\u63a5\u53e3\u83b7\u53d6Model\u5bf9\u8c61",description:"\u5728\u4e0a\u4e00\u7bc7\u4e2d,\u6211\u4eec\u4e86\u89e3\u5230\u4e86springfox\u901a\u8fc7groupName\u7684\u8fc7\u6ee4,\u62ff\u5230\u4e86\u6240\u6709\u7684\u63a5\u53e3,\u5e76\u4e14\u901a\u8fc7guava\u5e93\u7684ArrayListMultimap\u5bf9\u63a5\u53e3\u7684Controller\u8fdb\u4e00\u6b65\u8fdb\u884c\u4e86\u5206\u7ec4,\u63a5\u4e0b\u6765\u5c31\u662f\u89e3\u6790\u6bcf\u4e2a\u63a5\u53e3\u7684\u64cd\u4f5c\u4e86",source:"@site/docs/action/springfox/springfox10.md",sourceDirName:"action/springfox",slug:"/action/springfox/springfox10",permalink:"/docs/action/springfox/springfox10",draft:!1,tags:[],version:"current",lastUpdatedBy:"xiaoyumin",lastUpdatedAt:1660577531,formattedLastUpdatedAt:"2022\u5e748\u670815\u65e5",frontMatter:{},sidebar:"action",previous:{title:"springfox \u6e90\u7801\u5206\u6790(\u4e5d) \u6587\u6863\u521d\u59cb\u5316-\u5206\u7ec4",permalink:"/docs/action/springfox/springfox9"},next:{title:"springfox \u6e90\u7801\u5206\u6790(\u5341\u4e00) \u81ea\u5b9a\u4e49\u6dfb\u52a0Swagger Models\u529f\u80fd\u5b9e\u73b0",permalink:"/docs/action/springfox/springfox11"}},s={},u=[{value:"ModelContext",id:"modelcontext",level:2},{value:"\u521d\u59cb\u5316ModelContext Set\u96c6\u5408",id:"\u521d\u59cb\u5316modelcontext-set\u96c6\u5408",level:2},{value:"OperationModelsProviderPlugin",id:"operationmodelsproviderplugin",level:3},{value:"collectFromReturnType",id:"collectfromreturntype",level:4},{value:"collectParameters",id:"collectparameters",level:4},{value:"collectGlobalModels",id:"collectglobalmodels",level:4},{value:"SwaggerOperationModelsProvider",id:"swaggeroperationmodelsprovider",level:3},{value:"collectFromApiOperation",id:"collectfromapioperation",level:4},{value:"collectApiResponses",id:"collectapiresponses",level:4},{value:"ModelContext\u521d\u59cb\u5316",id:"modelcontext\u521d\u59cb\u5316",level:2},{value:"ModelContext\u8f6c\u5316\u4e3aModel",id:"modelcontext\u8f6c\u5316\u4e3amodel",level:2},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:2}],m={toc:u},c="wrapper";function g(e){var n=e.components,t=(0,r.Z)(e,a);return(0,l.kt)(c,(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"springfox-\u6e90\u7801\u5206\u6790\u5341-\u904d\u5386\u63a5\u53e3\u83b7\u53d6model\u5bf9\u8c61"},"springfox \u6e90\u7801\u5206\u6790(\u5341) \u904d\u5386\u63a5\u53e3\u83b7\u53d6Model\u5bf9\u8c61"),(0,l.kt)("p",null,"\u5728\u4e0a\u4e00\u7bc7\u4e2d,\u6211\u4eec\u4e86\u89e3\u5230\u4e86springfox\u901a\u8fc7groupName\u7684\u8fc7\u6ee4,\u62ff\u5230\u4e86\u6240\u6709\u7684\u63a5\u53e3,\u5e76\u4e14\u901a\u8fc7guava\u5e93\u7684",(0,l.kt)("inlineCode",{parentName:"p"},"ArrayListMultimap"),"\u5bf9\u63a5\u53e3\u7684Controller\u8fdb\u4e00\u6b65\u8fdb\u884c\u4e86\u5206\u7ec4,\u63a5\u4e0b\u6765\u5c31\u662f\u89e3\u6790\u6bcf\u4e2a\u63a5\u53e3\u7684\u64cd\u4f5c\u4e86"),(0,l.kt)("p",null,"\u8fd9\u7bc7\u4e3b\u8981\u4ecb\u7ecdspringfox\u89e3\u6790\u6bcf\u4e2a\u63a5\u53e3\u4e2d\u6d89\u53ca\u7684Model\u7c7b\u64cd\u4f5c,\u8fd9\u5176\u4e2d\u5305\u542b\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u53c2\u6570\u4e2d\u662fJava Bean\u7684\u53c2\u6570\u7c7b\u578b"),(0,l.kt)("li",{parentName:"ul"},"\u63a5\u53e3\u8fd4\u56de\u975evoid\u3001\u57fa\u7840\u7c7b\u578b\u7684\u7c7b\u578b"),(0,l.kt)("li",{parentName:"ul"},"\u5728",(0,l.kt)("inlineCode",{parentName:"li"},"@ApiResponse"),"\u6ce8\u89e3\u4e2d\u6807\u6ce8\u8fd4\u56de\u7684class\u7c7b\u578b")),(0,l.kt)("p",null,"\u76ee\u524d\u4e3b\u8981\u6709\u4ee5\u4e0a\u8fd9\u4e09\u79cd\u7c7b\u578b,\u901a\u8fc7\u89e3\u6790\u62ff\u5230\u63a5\u53e3\u6d89\u53ca\u7684Model\u7c7b\u578b,\u7136\u540e\u6dfb\u52a0\u5230\u4e00\u4e2aSet\u96c6\u5408\u4e2d,\u8be5Set\u96c6\u5408\u5c31\u5bf9\u5e94\u4e86Swagger\u6807\u51c6\u5c5e\u6027\u7684definitions\u5c5e\u6027"),(0,l.kt)("p",null,"\u5148\u6765\u770b\u904d\u5386\u63a5\u53e3\u7684\u4ee3\u7801\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"for (final ResourceGroup resourceGroup : sortedByName(allResourceGroups)) {\n  DocumentationContext documentationContext = context.getDocumentationContext();\n  Set<String> produces = new LinkedHashSet<String>(documentationContext.getProduces());\n  Set<String> consumes = new LinkedHashSet<String>(documentationContext.getConsumes());\n  String host = documentationContext.getHost();\n  Set<String> protocols = new LinkedHashSet<String>(documentationContext.getProtocols());\n  Set<ApiDescription> apiDescriptions = newHashSet();\n\n  Map<String, Model> models = new LinkedHashMap<String, Model>();\n  //\u5f97\u5230\u8be5Controller\u4e0b\u7684\u6240\u6709\u63a5\u53e3\n  List<RequestMappingContext> requestMappings = nullToEmptyList(requestMappingsByResourceGroup.get(resourceGroup));\n  for (RequestMappingContext each : sortedByMethods(requestMappings)) {\n    //\u62ff\u5230\u8be5\u63a5\u53e3\u7684\u6240\u6709Model\n    models.putAll(apiModelReader.read(each.withKnownModels(models)));\n    apiDescriptions.addAll(apiDescriptionReader.read(each));\n  }\n")),(0,l.kt)("p",null,"\u904d\u5386",(0,l.kt)("inlineCode",{parentName:"p"},"RequestMappingContext"),"\u5bf9\u8c61,\u5728\u524d\u9762\u6211\u4e5f\u5df2\u7ecf\u4ecb\u7ecd\u8fc7,\u8be5\u5bf9\u8c61\u5176\u5b9e\u5c31\u662f\u6bcf\u4e2a\u63a5\u53e3\u5b9e\u4f8b\u5bf9\u8c61"),(0,l.kt)("p",null,"\u6700\u4e3b\u8981\u7684\u662f\u6765\u770b",(0,l.kt)("inlineCode",{parentName:"p"},"apiModelReader.read"),"\u65b9\u6cd5"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"each.withKnownModels"),"\u65b9\u6cd5\u662f\u901a\u8fc7new\u5173\u952e\u5b57\u590d\u5236\u4e86\u4e00\u4e2a\u65b0\u7684",(0,l.kt)("inlineCode",{parentName:"p"},"RequestMappingContext")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public RequestMappingContext withKnownModels(Map<String, Model> knownModels) {\n    return new RequestMappingContext(documentationContext, handler,\n                                     operationModelContextsBuilder, requestMappingPattern, knownModels);\n}\n")),(0,l.kt)("p",null,"\u6765\u770b\u8bfb\u53d6\u63a5\u53e3Models\u7684\u6e90\u7801\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'/***\n   * \u8bfb\u53d6\u8be5\u63a5\u53e3Model\u4fe1\u606f\n   * @param context\n   * @return\n   */\npublic Map<String, Model> read(RequestMappingContext context) {\n    //\u5ffd\u7565\u7684class\u96c6\u5408\uff0c\u5982\u679c\u6ca1\u6709\u989d\u5916\u8bbe\u7f6e,\u5219\u5f97\u5230\u7684\u662fDefaults\u7c7b\u4e2d\u7684\u9ed8\u8ba4\u5ffd\u7565\u7c7bClass\u96c6\u5408\n    Set<Class> ignorableTypes = newHashSet(context.getIgnorableParameterTypes());\n    Set<ModelContext> modelContexts = pluginsManager.modelContexts(context);\n    Map<String, Model> modelMap = newHashMap(context.getModelMap());\n    for (ModelContext each : modelContexts) {\n        markIgnorablesAsHasSeen(typeResolver, ignorableTypes, each);\n        Optional<Model> pModel = modelProvider.modelFor(each);\n        if (pModel.isPresent()) {\n            LOG.debug("Generated parameter model id: {}, name: {}, schema: {} models",\n                      pModel.get().getId(),\n                      pModel.get().getName());\n            mergeModelMap(modelMap, pModel.get());\n        } else {\n            LOG.debug("Did not find any parameter models for {}", each.getType());\n        }\n        populateDependencies(each, modelMap);\n    }\n    return modelMap;\n}\n')),(0,l.kt)("p",null,"\u521d\u6b65\u901a\u8fc7\u6e90\u7801\u5f97\u77e5,\u8981\u60f3\u5148\u5f97\u5230Model,\u5219\u9700\u8981\u5148\u6784\u9020\u5f97\u5230ModelContext"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u521d\u59cb\u5316\u5916\u90e8\u6d89\u53ca\u5230\u7684\u5ffd\u7565\u7c7b\u578bSet\u96c6\u5408"),(0,l.kt)("li",{parentName:"ul"},"\u8bfb\u53d6RequestMappingContext\uff0c\u62ff\u5230ModelContext\u7684Set\u96c6\u5408"),(0,l.kt)("li",{parentName:"ul"},"context\u4e2d\u7684ModelMap\u5728\u6b64\u5904\u5176\u5b9e\u662f\u7a7a\u5bf9\u8c61\uff0c\u5bf9\u5e94\u7684modelMap\u4e5f\u662f\u7a7a\u5bf9\u8c61,\u8fd9\u4e2a\u5728\u4e0a\u9762\u7684",(0,l.kt)("inlineCode",{parentName:"li"},"withKnownModels"),"\u65b9\u6cd5\u4e2d\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230"),(0,l.kt)("li",{parentName:"ul"},"\u904d\u5386ModelContext\u7684Set\u96c6\u5408,\u901a\u8fc7modelProvider.modelFor\u7684\u65b9\u6cd5\u7531ModelContext\u8f6c\u6362\u6784\u9020\u6210\u76ee\u6807Model\u5bf9\u8c61")),(0,l.kt)("h2",{id:"modelcontext"},"ModelContext"),(0,l.kt)("p",null,"\u5728\u521d\u59cb\u5316ModelContext\u96c6\u5408\u4e4b\u524d,\u6211\u4eec\u5148\u6765\u770b\u770bModelContext\u7684\u5c5e\u6027"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"\npublic class ModelContext {\n    //\u7c7b\u578b\n  private final Type type;\n    //\u662f\u5426\u8fd4\u56de\u7c7b\u578b\n  private final boolean returnType;\n    //\u5206\u7ec4\u540d\u79f0\n  private final String groupName;\n    //\u6587\u6863\u7c7b\u578b\n  private final DocumentationType documentationType;\n  //\u7236\u7ea7\n  private final ModelContext parentContext;\n    //ResolvedType\n  private final Set<ResolvedType> seenTypes = newHashSet();\n    //model\u6784\u9020\u5668\n  private final ModelBuilder modelBuilder;\n  private final AlternateTypeProvider alternateTypeProvider;\n    //\u540d\u79f0\u7b56\u7565\n  private final GenericTypeNamingStrategy genericNamingStrategy;\n    //\u5ffd\u7565\u7c7b\u578b\n  private final ImmutableSet<Class> ignorableTypes;\n\n  private ModelContext(\n      String groupName,\n      Type type,\n      boolean returnType,\n      DocumentationType documentationType,\n      AlternateTypeProvider alternateTypeProvider,\n      GenericTypeNamingStrategy genericNamingStrategy,\n      ImmutableSet<Class> ignorableTypes) {\n    this.groupName = groupName;\n    this.documentationType = documentationType;\n    this.alternateTypeProvider = alternateTypeProvider;\n    this.genericNamingStrategy = genericNamingStrategy;\n    this.ignorableTypes = ignorableTypes;\n    this.parentContext = null;\n    this.type = type;\n    this.returnType = returnType;\n    this.modelBuilder = new ModelBuilder();\n  }\n //...   \n}\n")),(0,l.kt)("p",null,"\u53c2\u6570\u5bf9\u8c61\u5168\u90e8\u662ffinal\u5173\u952e\u5b57\u4fee\u9970"),(0,l.kt)("h2",{id:"\u521d\u59cb\u5316modelcontext-set\u96c6\u5408"},"\u521d\u59cb\u5316ModelContext Set\u96c6\u5408"),(0,l.kt)("p",null,"\u5148\u6765\u770b",(0,l.kt)("inlineCode",{parentName:"p"},"pluginsManager.modelContexts"),"\u65b9\u6cd5\u4e2d\u7684\u521d\u59cb\u5316\u64cd\u4f5c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public Set<ModelContext> modelContexts(RequestMappingContext context) {\n    DocumentationType documentationType = context.getDocumentationContext().getDocumentationType();\n    //\u6784\u5efa\u8be5\u63a5\u53e3\u7684ModelContext\u96c6\u5408\n    for (OperationModelsProviderPlugin each : operationModelsProviders.getPluginsFor(documentationType)) {\n      each.apply(context);\n    }\n    return context.operationModelsBuilder().build();\n  }\n")),(0,l.kt)("p",null,"\u901a\u8fc7\u6587\u6863\u7c7b\u578b,\u83b7\u53d6Model\u7684",(0,l.kt)("inlineCode",{parentName:"p"},"OperationModelsProviderPlugin"),"\u63d2\u4ef6\u5b9e\u73b0\u7c7b\uff0c\u7136\u540e\u8c03\u7528apply\u65b9\u6cd5\u521d\u59cb\u5316"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"OperationModelsProviderPlugin"),"\u4e3b\u8981\u6709\u4e24\u4e2a\u5b9e\u73b0\u7c7b\uff0c\u5206\u522b\u662f\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"OperationModelsProviderPlugin"),"\uff1a\u5904\u7406\u8fd4\u56de\u7c7b\u578b\u3001\u53c2\u6570\u7c7b\u578b\u7b49"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SwaggerOperationModelsProvider"),"\uff1a\u5904\u7406swagger\u6ce8\u89e3\u63d0\u4f9b\u7684\u503c\u7c7b\u578b,\u4e3b\u8981\u5305\u62ec",(0,l.kt)("inlineCode",{parentName:"li"},"@ApiResponse"),"\u3001",(0,l.kt)("inlineCode",{parentName:"li"},"@ApiOperation"))),(0,l.kt)("h3",{id:"operationmodelsproviderplugin"},"OperationModelsProviderPlugin"),(0,l.kt)("p",null,"\u5148\u6765\u770b\u5e38\u89c4\u7c7b\u578b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"@Component\n@Order(Ordered.HIGHEST_PRECEDENCE)\npublic class OperationModelsProvider implements OperationModelsProviderPlugin {\n\n  private static final Logger LOG = LoggerFactory.getLogger(OperationModelsProvider.class);\n  private final TypeResolver typeResolver;\n\n  @Autowired\n  public OperationModelsProvider(TypeResolver typeResolver) {\n    this.typeResolver = typeResolver;\n  }\n\n  @Override\n  public void apply(RequestMappingContext context) {\n    collectFromReturnType(context);\n    collectParameters(context);\n    collectGlobalModels(context);\n  }\n    \n}\n")),(0,l.kt)("p",null,"\u5e38\u89c4Model\u63d2\u4ef6\u7684apply\u65b9\u6cd5\u4e3b\u8981\u6709\u4e09\u4e2a\u65b9\u6cd5"),(0,l.kt)("h4",{id:"collectfromreturntype"},"collectFromReturnType"),(0,l.kt)("p",null,"\u6536\u96c6\u63a5\u53e3\u8fd4\u56de\u7c7b\u578b,\u8ddf\u8e2a\u6e90\u7801;"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'private void collectFromReturnType(RequestMappingContext context) {\n    ResolvedType modelType = context.getReturnType();\n    modelType = context.alternateFor(modelType);\n    LOG.debug("Adding return parameter of type {}", resolvedTypeSignature(modelType).or("<null>"));\n    context.operationModelsBuilder().addReturn(modelType);\n  }\n')),(0,l.kt)("p",null,"\u76f4\u63a5\u62ff\u5230\u63a5\u53e3\u7684\u8fd4\u56de\u7c7b\u578b,\u8fd9\u4e2a\u8fd4\u56de\u7c7b\u578b\u5728\u524d\u9762\u63a5\u53e3\u521d\u59cb\u5316\u65f6,\u5df2\u7ecf\u521d\u59cb\u5316\uff0cgetReturnType\u65b9\u6cd5\u5b9e\u9645\u8c03\u7528\u7684\u662fRequestHandler\u7684\u65b9\u6cd5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public ResolvedType getReturnType() {\n    return handler.getReturnType();\n}\n")),(0,l.kt)("p",null,"\u6211\u4eec\u5728\u524d\u9762\u4e5f\u4ecb\u7ecd\u8fc7\uff0cRequestHander\u56e0\u4e3a\u662f\u63a5\u53e3\uff0c\u5728springfox\u4e2d\u7684\u5b9e\u73b0\u7c7b\u662f",(0,l.kt)("inlineCode",{parentName:"p"},"WebMvcRequestHandler")),(0,l.kt)("p",null,"\u62ff\u5230\u8fd4\u56de\u7c7b\u578b,\u6700\u7ec8\u7528addReturn\u65b9\u6cd5\u6dfb\u52a0\u5230context\u5bf9\u8c61\u4e2d\u7684\u5168\u5c40",(0,l.kt)("inlineCode",{parentName:"p"},"Set<ModelContext>"),"\u5bf9\u8c61\u4e2d"),(0,l.kt)("h4",{id:"collectparameters"},"collectParameters"),(0,l.kt)("p",null,"\u6536\u96c6\u63a5\u53e3\u4e2d\u7684\u53c2\u6570\u7c7b\u578b."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'private void collectParameters(RequestMappingContext context) {\n\n\n    LOG.debug("Reading parameters models for handlerMethod |{}|", context.getName());\n\n    List<ResolvedMethodParameter> parameterTypes = context.getParameters();\n    for (ResolvedMethodParameter parameterType : parameterTypes) {\n        if (parameterType.hasParameterAnnotation(RequestBody.class)\n            || parameterType.hasParameterAnnotation(RequestPart.class)) {\n          ResolvedType modelType = context.alternateFor(parameterType.getParameterType());\n          LOG.debug("Adding input parameter of type {}", resolvedTypeSignature(modelType).or("<null>"));\n          context.operationModelsBuilder().addInputParam(modelType);\n        }\n    }\n    LOG.debug("Finished reading parameters models for handlerMethod |{}|", context.getName());\n  }\n')),(0,l.kt)("p",null,"\u63a5\u53e3\u53c2\u6570\u7c7b\u578b\u4e2d,springfox\u76ee\u524d\u53ea\u89e3\u6790\u4e24\u79cd"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u4e00\u79cd\u662f\u5b9e\u4f53\u7c7b\u901a\u8fc7Spring\u7684",(0,l.kt)("inlineCode",{parentName:"li"},"@RequestBody"),"\u6ce8\u89e3\u6807\u6ce8\u7684,\u6211\u4eec\u5728\u4f7f\u7528Spring\u5f00\u53d1\u7684\u65f6\u5019\u5982\u679c\u4f7f\u7528\u8be5\u6ce8\u89e3\u901a\u5e38\u662f\u4f7f\u7528\u7684JSON\u4f5c\u4e3a\u63a5\u53e3\u7684\u4ea4\u4e92\u683c\u5f0f"),(0,l.kt)("li",{parentName:"ul"},"\u901a\u8fc7Spring\u7684",(0,l.kt)("inlineCode",{parentName:"li"},"@ReuqestPart"),"\u6ce8\u89e3\u6807\u6ce8\u7684\u53c2\u6570\u7c7b\u578b\uff0c",(0,l.kt)("inlineCode",{parentName:"li"},"@RequestPart"),"\u6ce8\u89e3\u662f\u914d\u5408\u6587\u4ef6\u4e0a\u4f20\u65f6\u9644\u5c5e\u53c2\u6570\u7c7b\u578b\u4f7f\u7528\u7684\u6ce8\u89e3")),(0,l.kt)("h4",{id:"collectglobalmodels"},"collectGlobalModels"),(0,l.kt)("p",null,"\u6536\u96c6\u63a5\u53e3\u7684\u5168\u5c40Model"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"private void collectGlobalModels(RequestMappingContext context) {\n    for (ResolvedType each : context.getAdditionalModels()) {\n        context.operationModelsBuilder().addInputParam(each);\n        context.operationModelsBuilder().addReturn(each);\n    }\n}\n")),(0,l.kt)("p",null,"\u6536\u96c6\u5916\u90e8\u5168\u5c40\u6dfb\u52a0\u7684Model,\u6dfb\u52a0\u8fdb\u5165\u96c6\u5408\u4e2d"),(0,l.kt)("h3",{id:"swaggeroperationmodelsprovider"},"SwaggerOperationModelsProvider"),(0,l.kt)("p",null,"\u57fa\u4e8eSwagger\u76f8\u5173\u6ce8\u89e3\u8d4b\u503c\u7684\u7c7b\u578bClass\u89e3\u6790"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"@Component\n@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)\npublic class SwaggerOperationModelsProvider implements OperationModelsProviderPlugin {\n\n  private static final Logger LOG = LoggerFactory.getLogger(SwaggerOperationModelsProvider.class);\n  private final TypeResolver typeResolver;\n\n  @Autowired\n  public SwaggerOperationModelsProvider(TypeResolver typeResolver) {\n    this.typeResolver = typeResolver;\n  }\n\n  @Override\n  public void apply(RequestMappingContext context) {\n    collectFromApiOperation(context);\n    collectApiResponses(context);\n  }\n}\n")),(0,l.kt)("p",null,"\u4e3b\u8981\u6709\u4e24\u79cd\u7c7b\u578b\uff1a"),(0,l.kt)("p",null,"\u6536\u96c6\u4f7f\u7528",(0,l.kt)("inlineCode",{parentName:"p"},"@ApiOperation"),"\u6ce8\u89e3\u65f6,\u4f7f\u7528\u4e3b\u53e5\u7684\u5c5e\u6027\u503c"),(0,l.kt)("p",null,"\u6536\u96c6",(0,l.kt)("inlineCode",{parentName:"p"},"@ApiResponse"),"\u54cd\u5e94\u72b6\u6001\u7801\u6d89\u53ca\u5230\u7684Model"),(0,l.kt)("h4",{id:"collectfromapioperation"},"collectFromApiOperation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'private void collectFromApiOperation(RequestMappingContext context) {\n    ResolvedType returnType = context.getReturnType();\n    returnType = context.alternateFor(returnType);\n    Optional<ResolvedType> returnParameter = context.findAnnotation(ApiOperation.class)\n        .transform(resolvedTypeFromOperation(typeResolver, returnType));\n    if (returnParameter.isPresent() && returnParameter.get() != returnType) {\n      LOG.debug("Adding return parameter of type {}", resolvedTypeSignature(returnParameter.get()).or("<null>"));\n      context.operationModelsBuilder().addReturn(returnParameter.get());\n    }\n  }\n')),(0,l.kt)("p",null,"\u67e5\u627e\u6ce8\u89e3,\u83b7\u53d6ResolvedType\u7684\u503c"),(0,l.kt)("p",null,"\u6838\u5fc3\u662f\u62ff\u5230ApiOeration\u6ce8\u89e3\u7684response-class\u5c5e\u6027\u503c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"@VisibleForTesting\nstatic ResolvedType getResolvedType(\n    ApiOperation annotation,\n    TypeResolver resolver,\n    ResolvedType defaultType) {\n\n    if (null != annotation) {\n        Class<?> response = annotation.response();\n        String responseContainer = annotation.responseContainer();\n        if (resolvedType(resolver, response, responseContainer).isPresent()) {\n            return resolvedType(resolver, response, responseContainer).get();\n        }\n    }\n    return defaultType;\n}\n")),(0,l.kt)("h4",{id:"collectapiresponses"},"collectApiResponses"),(0,l.kt)("p",null,"\u6536\u96c6\u5728\u63a5\u53e3\u4e0a\u6807\u6ce8\u72b6\u6001\u7801\u6d89\u53ca\u7684Class\u7c7b\uff0cApiResponses\u662f\u96c6\u5408\uff0c\u6700\u7ec8\u904d\u5386\u5f97\u5230ApiResponse"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'private void collectApiResponses(RequestMappingContext context) {\n  List<ApiResponses> allApiResponses = context.findAnnotations(ApiResponses.class);\n  LOG.debug("Reading parameters models for handlerMethod |{}|", context.getName());\n  Set<ResolvedType> seenTypes = newHashSet();\n  for (ApiResponses apiResponses : allApiResponses) {\n    List<ResolvedType> modelTypes = toResolvedTypes(context).apply(apiResponses);\n    for (ResolvedType modelType : modelTypes) {\n      if (!seenTypes.contains(modelType)) {\n        seenTypes.add(modelType);\n        context.operationModelsBuilder().addReturn(modelType);\n      }\n    }\n  }\n}\n')),(0,l.kt)("h2",{id:"modelcontext\u521d\u59cb\u5316"},"ModelContext\u521d\u59cb\u5316"),(0,l.kt)("p",null,"\u6211\u4eec\u901a\u8fc7TypeResolved\u65b9\u6cd5\u5c06\u57fa\u7840\u7684Class\u8f6c\u6362\u4e3aResolvedType"),(0,l.kt)("p",null,"\u6b64\u65f6ModelContext\u63d0\u4f9b\u4e86\u51e0\u4e2a\u65b9\u6cd5\u5c06ResolvedType\u8f6c\u6362\u4e3aModelContext\u7c7b\u578b"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"returnValue:\u63d0\u4f9b\u8fd4\u56de\u7684class"),(0,l.kt)("li",{parentName:"ul"},"inputParam:\u53c2\u6570\u7c7b\u7684\u65b9\u6cd5")),(0,l.kt)("p",null,"\u901a\u8fc7",(0,l.kt)("inlineCode",{parentName:"p"},"OperationModelContextsBuilder"),"\u63d0\u4f9b\u7684\u9ed8\u8ba4\u53c2\u6570,\u6784\u9020\u51fd\u6570\u9ed8\u8ba4\u6784\u9020\u51faModelContext\u5bf9\u8c61"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"/**\n   * Convenience method to provide an new context for an input parameter\n   *\n   * @param group                 - group name of the docket\n   * @param type                  - type\n   * @param documentationType     - for documentation type\n   * @param alternateTypeProvider - alternate type provider\n   * @param genericNamingStrategy - how generic types should be named\n   * @param ignorableTypes        - types that can be ignored\n   * @return new context\n   */\npublic static ModelContext inputParam(\n    String group,\n    Type type,\n    DocumentationType documentationType,\n    AlternateTypeProvider alternateTypeProvider,\n    GenericTypeNamingStrategy genericNamingStrategy,\n    ImmutableSet<Class> ignorableTypes) {\n\n    return new ModelContext(\n        group,\n        type,\n        false,\n        documentationType,\n        alternateTypeProvider,\n        genericNamingStrategy,\n        ignorableTypes);\n}\n")),(0,l.kt)("h2",{id:"modelcontext\u8f6c\u5316\u4e3amodel"},"ModelContext\u8f6c\u5316\u4e3aModel"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'Set<ModelContext> modelContexts = pluginsManager.modelContexts(context);\nMap<String, Model> modelMap = newHashMap(context.getModelMap());\nfor (ModelContext each : modelContexts) {\n    //\u6dfb\u52a0\u57fa\u7840\u5ffd\u7565\u7c7b\u578b\u7684ResolvedType\u7c7b\u578b\n    markIgnorablesAsHasSeen(typeResolver, ignorableTypes, each);\n    //\u901a\u8fc7modelProvider\u83b7\u53d6\u5230Model\u7c7b\u578b,modelProvider\u662f\u63a5\u53e3,\u6709\u4e24\u4e2a\u5b9e\u73b0\u7c7b\n    //DefaultModelProvider:\u9ed8\u8ba4\u88c5\u6362\n    //CachingModelProvider:\u7f13\u5b58\n    Optional<Model> pModel = modelProvider.modelFor(each);\n    if (pModel.isPresent()) {\n        LOG.debug("Generated parameter model id: {}, name: {}, schema: {} models",\n                  pModel.get().getId(),\n                  pModel.get().getName());\n        mergeModelMap(modelMap, pModel.get());\n    } else {\n        LOG.debug("Did not find any parameter models for {}", each.getType());\n    }\n    populateDependencies(each, modelMap);\n}\n')),(0,l.kt)("p",null,"\u901a\u8fc7modelProvider\u5c06ModelContext\u8f6c\u6362\u4e3aModel\u7c7b\u578b"),(0,l.kt)("p",null,"modelProvider\u662f\u63a5\u53e3,\u6709\u4e24\u4e2a\u5b9e\u73b0\u7c7b\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"DefaultModelProvider:\u9ed8\u8ba4\u88c5\u6362,\u6bcf\u6b21\u90fd\u4f1a\u5c06modelContext\u8f6c\u6362\u4e3amodel"),(0,l.kt)("li",{parentName:"ul"},"CachingModelProvider:\u58f0\u660e\u4e86\u4e00\u4e2aguava\u7684\u7f13\u5b58\u6c60,\u5148\u4ece\u7f13\u5b58\u6c60\u83b7\u53d6,\u5982\u679c\u6ca1\u6709\uff0c\u5219\u8c03\u7528\u9ed8\u8ba4\u7684\u5904\u7406\u5668,\u8f6c\u6362\u4e3amodel\uff0c\u7136\u540e\u653e\u5165\u7f13\u5b58\u6c60\u4e2d")),(0,l.kt)("p",null,"\u6b64\u5904modelProvider\u4f7f\u7528\u7684\u662fcaching\u7f13\u5b58\u914d\u7f6e"),(0,l.kt)("p",null,"\u521d\u6b21\u901a\u8fc7modelFor\u83b7\u53d6\u662f\u4e3a\u7a7a\u7684,\u6240\u4ee5\u63a5\u4e0b\u6765\u770b",(0,l.kt)("inlineCode",{parentName:"p"},"populateDependencies"),"\u65b9\u6cd5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"private void populateDependencies(ModelContext modelContext, Map<String, Model> modelMap) {\n    Map<String, Model> dependencies = modelProvider.dependencies(modelContext);\n    for (Model each : dependencies.values()) {\n        mergeModelMap(modelMap, each);\n    }\n}\n")),(0,l.kt)("p",null,"caching\u9ed8\u8ba4\u662f\u4f9d\u8d56default\u7684\uff0c\u6b64\u5904dependencies\u5b9e\u9645\u662f\u8c03\u7528\u7684default\u7684"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"@Override\npublic Map<String, Model> dependencies(ModelContext modelContext) {\n    Map<String, Model> models = newHashMap();\n    for (ResolvedType resolvedType : dependencyProvider.dependentModels(modelContext)) {\n        ModelContext parentContext = ModelContext.fromParent(modelContext, resolvedType);\n        Optional<Model> model = modelFor(parentContext).or(mapModel(parentContext, resolvedType));\n        if (model.isPresent()) {\n            models.put(model.get().getName(), model.get());\n        }\n    }\n    return models;\n}\n")),(0,l.kt)("p",null,"dependencyProvider\u548cmodelProvider\u662f\u540c\u4e00\u4e2a\u7b56\u7565\uff0c\u9ed8\u8ba4\u63a5\u53e3\uff0c\u6709\u4e24\u4e2a\u5b9e\u73b0\u7c7b,\u4e00\u4e2a\u662fcache\uff0c\u4e00\u4e2a\u662fdefault"),(0,l.kt)("p",null,"\u6240\u4ee5\u6211\u4eec\u9ed8\u8ba4\u6765\u770bdefault\u7684\u5373\u53ef"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"@Override\npublic Set<ResolvedType> dependentModels(ModelContext modelContext) {\n    return concat(from(resolvedDependencies(modelContext))\n                  .filter(ignorableTypes(modelContext))\n                  .filter(not(baseTypes(modelContext))),\n                  schemaPluginsManager.dependencies(modelContext))\n        .toSet();\n}\n")),(0,l.kt)("p",null,"\u5728\u9ed8\u8ba4\u914d\u7f6e\u4e2d,\u6700\u7ec8\u662f\u901a\u8fc7schemaPluginsManager\u7684\u65b9\u6cd5\u6765\u89e3\u51b3ModelContext\u7684\u8f6c\u6362"),(0,l.kt)("p",null,"\u6700\u7ec8\u662f\u901a\u8fc7",(0,l.kt)("inlineCode",{parentName:"p"},"SyntheticModelProviderPlugin"),"\u6765\u8f6c\u6362,\u4f46\u662fspringfox\u4e2d\u4ed6\u6ca1\u6709\u5b9e\u73b0\u7c7b,\u6240\u4ee5\u6b64\u5904\u7684Plugin\u662f\u7a7a\u7684\uff0c\u4e0d\u5b58\u5728"),(0,l.kt)("p",null,"\u6240\u4ee5\u6b64\u5904\u7684dependentModels\u8fd4\u56de\u7684Set\u96c6\u5408\u662f\u7a7a\u7684"),(0,l.kt)("p",null,"\u518d\u6765\u770b",(0,l.kt)("inlineCode",{parentName:"p"},"resolvedDependencies"),"\u7684\u65b9\u6cd5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'private List<ResolvedType> resolvedDependencies(ModelContext modelContext) {\n    ResolvedType resolvedType = modelContext.alternateFor(modelContext.resolvedType(typeResolver));\n    if (isBaseType(ModelContext.fromParent(modelContext, resolvedType))) {\n      LOG.debug("Marking base type {} as seen", resolvedType.getSignature());\n      modelContext.seen(resolvedType);\n      return newArrayList();\n    }\n    List<ResolvedType> dependencies = newArrayList(resolvedTypeParameters(modelContext, resolvedType));\n    dependencies.addAll(resolvedArrayElementType(modelContext, resolvedType));\n    dependencies.addAll(resolvedMapType(modelContext, resolvedType));\n    dependencies.addAll(resolvedPropertiesAndFields(modelContext, resolvedType));\n    dependencies.addAll(resolvedSubclasses(resolvedType));\n    return dependencies;\n  }\n')),(0,l.kt)("p",null,"\u4ece\u4ee3\u7801\u4e2d\u6211\u4eec\u80fd\u770b\u5230\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u9996\u5148\u56e0\u4e3aModelContext\u4e2d\u5c5e\u6027\u662f\u5305\u542btype\u7684\uff0c\u6240\u4ee5\u9ed8\u8ba4\u62ff\u5230ResolvedType"),(0,l.kt)("li",{parentName:"ul"},"\u901a\u8fc7\u62ff\u5230\u53c2\u6570\u7c7b\u578b\u5f97\u5230ResolvedType\u96c6\u5408\uff0c\u5982\u679c\u6709\u7236\u7c7b\u5219\u9012\u5f52\u8c03\u7528.")),(0,l.kt)("p",null,"\u6700\u7ec8\u901a\u8fc7\u53cd\u5c04\u7684\u65b9\u5f0f\u62ff\u5230Model\u7c7b\u578b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'private Optional<Model> reflectionBasedModel(ModelContext modelContext, ResolvedType propertiesHost) {\n    ImmutableMap<String, ModelProperty> propertiesIndex\n        = uniqueIndex(properties(modelContext, propertiesHost), byPropertyName());\n    LOG.debug("Inferred {} properties. Properties found {}", propertiesIndex.size(),\n              Joiner.on(", ").join(propertiesIndex.keySet()));\n    Map<String, ModelProperty> properties = newTreeMap();\n    properties.putAll(propertiesIndex);\n    return Optional.of(modelBuilder(propertiesHost, properties, modelContext));\n}\n\nprivate Model modelBuilder(ResolvedType propertiesHost,\n                           Map<String, ModelProperty> properties,\n                           ModelContext modelContext) {\n    String typeName = typeNameExtractor.typeName(ModelContext.fromParent(modelContext, propertiesHost));\n    modelContext.getBuilder()\n        .id(typeName)\n        .type(propertiesHost)\n        .name(typeName)\n        .qualifiedType(simpleQualifiedTypeName(propertiesHost))\n        .properties(properties)\n        .description("")\n        .baseModel("")\n        .discriminator("")\n        .subTypes(new ArrayList<ModelReference>());\n    return schemaPluginsManager.model(modelContext);\n}\n')),(0,l.kt)("p",null,"\u6784\u9020Model\u7684\u57fa\u7840\u5c5e\u6027\uff0c\u5305\u62ec\u7c7b\u578b\uff0c\u540d\u79f0\u3001\u63cf\u8ff0\u3001\u5c5e\u6027\u7b49\u4fe1\u606f"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'private List<ModelProperty> propertiesFor(ResolvedType type, ModelContext givenContext, String namePrefix) {\n    List<ModelProperty> properties = newArrayList();\n    BeanDescription beanDescription = beanDescription(type, givenContext);\n    Map<String, BeanPropertyDefinition> propertyLookup = uniqueIndex(beanDescription.findProperties(),\n        BeanPropertyDefinitions.beanPropertyByInternalName());\n    for (Map.Entry<String, BeanPropertyDefinition> each : propertyLookup.entrySet()) {\n      LOG.debug("Reading property {}", each.getKey());\n      BeanPropertyDefinition jacksonProperty = each.getValue();\n      Optional<AnnotatedMember> annotatedMember\n          = Optional.fromNullable(safeGetPrimaryMember(jacksonProperty));\n      if (annotatedMember.isPresent()) {\n        properties.addAll(candidateProperties(type, annotatedMember.get(), jacksonProperty, givenContext, namePrefix));\n      }\n    }\n    return FluentIterable.from(properties).toSortedSet(byPropertyName()).asList();\n  }\n')),(0,l.kt)("p",null,"\u83b7\u53d6\u5c5e\u6027\u96c6\u5408\u914d\u7f6e\u7684\u4ee3\u7801"),(0,l.kt)("h2",{id:"\u603b\u7ed3"},"\u603b\u7ed3"),(0,l.kt)("p",null,"\u901a\u8fc7\u6e90\u7801\u7684\u4e00\u4e9b\u7814\u7a76,springfox\u4e3b\u8981\u7684\u5904\u7406\u6d41\u7a0b\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u6536\u96c6\u8be5\u63a5\u53e3\u7684\u53c2\u6570\u7c7b\u578bModel"),(0,l.kt)("li",{parentName:"ul"},"\u6536\u96c6",(0,l.kt)("inlineCode",{parentName:"li"},"@ApiOperation"),"\u6ce8\u89e3\u7684response\u7c7b\u578bModel"),(0,l.kt)("li",{parentName:"ul"},"\u6536\u96c6\u5168\u5c40Model"),(0,l.kt)("li",{parentName:"ul"},"\u6536\u96c6\u63a5\u53e3\u8fd4\u56de\u7c7b\u578bModel"),(0,l.kt)("li",{parentName:"ul"},"\u6536\u96c6\u63a5\u53e3\u4e3b\u952e",(0,l.kt)("inlineCode",{parentName:"li"},"@ApiResponses"),"\u72b6\u6001\u7801\u6d89\u53ca\u7684\u7c7b\u578bModel"),(0,l.kt)("li",{parentName:"ul"},"\u5728\u6536\u96c6\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4e86\u7f13\u5b58\u7b56\u7565,\u8fd9\u6837\u80fd\u63d0\u9ad8\u89e3\u6790\u6548\u7387")))}g.isMDXComponent=!0}}]);